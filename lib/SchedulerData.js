"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var moment = require("moment");
var rrule_1 = require("rrule");
var Config_1 = require("./Config");
var Behaviors_1 = require("./Behaviors");
var ViewTypes_1 = require("./types/ViewTypes");
var CellUnits_1 = require("./types/CellUnits");
var SchedulerData = (function () {
    function SchedulerData(stateUpdateHandler, date, viewType, showAgenda, isEventPerspective, newConfig, newBehaviors) {
        if (date === void 0) { date = moment(); }
        if (viewType === void 0) { viewType = ViewTypes_1.ViewTypes.Week; }
        if (showAgenda === void 0) { showAgenda = false; }
        if (isEventPerspective === void 0) { isEventPerspective = false; }
        this.stateUpdateHandler = stateUpdateHandler;
        this.resources = [];
        this.stocks = {};
        this.events = [];
        this.eventGroups = [];
        this.eventGroupsAutoGenerated = true;
        this.viewType = viewType;
        this.cellUnit = viewType === ViewTypes_1.ViewTypes.Day ? CellUnits_1.CellUnits.Hour : CellUnits_1.CellUnits.Day;
        this.showAgenda = showAgenda;
        this.isEventPerspective = isEventPerspective;
        this.resizing = false;
        this.scrollToSpecialMoment = false;
        this.documentWidth = 0;
        this.config = newConfig == undefined ? Config_1.Config : __assign(__assign({}, Config_1.Config), newConfig);
        this._validateMinuteStep(this.config.minuteStep);
        this.behaviors = newBehaviors == undefined ? Behaviors_1.default : __assign(__assign({}, Behaviors_1.default), newBehaviors);
        this._resolveDate(0, date);
        this._createHeaders();
        this._createRenderData();
    }
    SchedulerData.prototype.setResources = function (resources) {
        this._validateResource(resources);
        this.resources = Array.from(new Set(resources));
    };
    SchedulerData.prototype.setEventGroupsAutoGenerated = function (autoGenerated) {
        this.eventGroupsAutoGenerated = autoGenerated;
    };
    SchedulerData.prototype.setEventGroups = function (eventGroups) {
        this._validateEventGroups(eventGroups);
        this.eventGroups = Array.from(new Set(eventGroups));
        this.eventGroupsAutoGenerated = false;
    };
    SchedulerData.prototype.setStocks = function (stocks) {
        this.stocks = this._createStockData(stocks);
    };
    SchedulerData.prototype.setMinuteStep = function (minuteStep) {
        if (this.config.minuteStep !== minuteStep) {
            this._validateMinuteStep(minuteStep);
            this.config.minuteStep = minuteStep;
            this._createHeaders();
            this._createRenderData();
        }
    };
    SchedulerData.prototype.setBesidesWidth = function (besidesWidth) {
        if (besidesWidth >= 0) {
            this.config.besidesWidth = besidesWidth;
        }
    };
    SchedulerData.prototype.getMinuteStepsInHour = function () {
        return 60 / this.config.minuteStep;
    };
    SchedulerData.prototype.addResource = function (resource) {
        var existedResources = this.resources.filter(function (x) { return x.id === resource.id; });
        if (existedResources.length === 0) {
            this.resources.push(resource);
            this._createRenderData();
        }
    };
    SchedulerData.prototype.addEventGroup = function (eventGroup) {
        var existedEventGroups = this.eventGroups.filter(function (x) { return x.id === eventGroup.id; });
        if (existedEventGroups.length === 0) {
            this.eventGroups.push(eventGroup);
            this._createRenderData();
        }
    };
    SchedulerData.prototype.removeEventGroupById = function (eventGroupId) {
        var index = -1;
        this.eventGroups.forEach(function (item, idx) {
            if (item.id === eventGroupId) {
                index = idx;
            }
        });
        if (index !== -1) {
            this.eventGroups.splice(index, 1);
        }
    };
    SchedulerData.prototype.containsEventGroupId = function (eventGroupId) {
        var index = -1;
        this.eventGroups.forEach(function (item, idx) {
            if (item.id === eventGroupId) {
                index = idx;
            }
        });
        return index !== -1;
    };
    SchedulerData.prototype.setEvents = function (events) {
        this._validateEvents(events);
        this.events = Array.from(events);
        if (this.eventGroupsAutoGenerated) {
            this._generateEventGroups();
        }
        if (this.config.recurringEventsEnabled) {
            this._handleRecurringEvents();
        }
        this._createRenderData();
    };
    SchedulerData.prototype.setScrollToSpecialMoment = function (scrollToSpecialMoment) {
        if (this.config.scrollToSpecialMomentEnabled) {
            this.scrollToSpecialMoment = scrollToSpecialMoment;
        }
    };
    SchedulerData.prototype.prev = function () {
        this._resolveDate(-1);
        this.events = [];
        this._createHeaders();
        this._createRenderData();
    };
    SchedulerData.prototype.next = function () {
        this._resolveDate(1);
        this.events = [];
        this._createHeaders();
        this._createRenderData();
    };
    SchedulerData.prototype.setDate = function (date) {
        if (date === void 0) { date = moment(); }
        this._resolveDate(0, date);
        this.events = [];
        this._createHeaders();
        this._createRenderData();
    };
    SchedulerData.prototype.setViewType = function (viewType, showAgenda, isEventPerspective) {
        if (viewType === void 0) { viewType = ViewTypes_1.ViewTypes.Week; }
        if (showAgenda === void 0) { showAgenda = false; }
        if (isEventPerspective === void 0) { isEventPerspective = false; }
        this.showAgenda = showAgenda;
        this.isEventPerspective = isEventPerspective;
        this.cellUnit = CellUnits_1.CellUnits.Day;
        if (this.viewType !== viewType) {
            var date = this.startDate;
            if (viewType === ViewTypes_1.ViewTypes.Custom || viewType === ViewTypes_1.ViewTypes.Custom1 || viewType === ViewTypes_1.ViewTypes.Custom2) {
                this.viewType = viewType;
                this._resolveDate(0, date);
            }
            else {
                if (this.viewType < viewType) {
                    if (viewType === ViewTypes_1.ViewTypes.Week) {
                        this.startDate = moment(date).startOf('week');
                        this.endDate = moment(this.startDate).endOf('week');
                    }
                    else if (viewType === ViewTypes_1.ViewTypes.Month) {
                        this.startDate = moment(date).startOf('month');
                        this.endDate = moment(this.startDate).endOf('month');
                    }
                    else if (viewType === ViewTypes_1.ViewTypes.Quarter) {
                        this.startDate = moment(date).startOf('quarter');
                        this.endDate = moment(this.startDate).endOf('quarter');
                    }
                    else if (viewType === ViewTypes_1.ViewTypes.Year) {
                        this.startDate = moment(date).startOf('year');
                        this.endDate = moment(this.startDate).endOf('year');
                    }
                }
                else {
                    var start = moment(this.startDate);
                    var end = moment(this.endDate).add(1, 'days');
                    if (this.selectDate !== undefined) {
                        var selectDate = moment(this.selectDate);
                        if (selectDate >= start && selectDate < end) {
                            date = this.selectDate;
                        }
                    }
                    var now = moment();
                    if (now >= start && now < end) {
                        date = now;
                    }
                    if (viewType === ViewTypes_1.ViewTypes.Day) {
                        this.startDate = date;
                        this.endDate = this.startDate;
                        this.cellUnit = CellUnits_1.CellUnits.Hour;
                    }
                    else if (viewType === ViewTypes_1.ViewTypes.Week) {
                        this.startDate = moment(date).startOf('week');
                        this.endDate = moment(this.startDate).endOf('week');
                    }
                    else if (viewType === ViewTypes_1.ViewTypes.Month) {
                        this.startDate = moment(date).startOf('month');
                        this.endDate = moment(this.startDate).endOf('month');
                    }
                    else if (viewType === ViewTypes_1.ViewTypes.Quarter) {
                        this.startDate = moment(date).startOf('quarter');
                        this.endDate = moment(this.startDate).endOf('quarter');
                    }
                }
                this.viewType = viewType;
            }
            this.events = [];
            this._createHeaders();
            this._createRenderData();
            this.setScrollToSpecialMoment(true);
        }
    };
    SchedulerData.prototype.setSchedulerMaxHeight = function (newSchedulerMaxHeight) {
        this.config.schedulerMaxHeight = newSchedulerMaxHeight;
    };
    SchedulerData.prototype.isSchedulerResponsive = function () {
        return !!this.config.schedulerWidth.endsWith && this.config.schedulerWidth.endsWith('%');
    };
    SchedulerData.prototype.toggleExpandStatus = function (slotId) {
        var slotEntered = false;
        var slotIndent = -1;
        var isExpanded = false;
        var expandedMap = new Map();
        this.renderData.forEach(function (item) {
            if (slotEntered === false) {
                if (item.slotId === slotId && item.hasChildren) {
                    slotEntered = true;
                    isExpanded = !item.expanded;
                    item.expanded = isExpanded;
                    slotIndent = item.indent;
                    expandedMap.set(item.indent, {
                        expanded: item.expanded,
                        render: item.render,
                    });
                }
            }
            else {
                if (item.indent > slotIndent) {
                    var expandStatus = expandedMap.get(item.indent - 1);
                    item.render = expandStatus.expanded && expandStatus.render;
                    if (item.hasChildren) {
                        expandedMap.set(item.indent, {
                            expanded: item.expanded,
                            render: item.render,
                        });
                    }
                }
                else {
                    slotEntered = false;
                }
            }
        });
    };
    SchedulerData.prototype.isResourceViewResponsive = function () {
        var resourceTableWidth = this.getResourceTableConfigWidth();
        return !!resourceTableWidth.endsWith && resourceTableWidth.endsWith('%');
    };
    SchedulerData.prototype.isContentViewResponsive = function () {
        var contentCellWidth = this.getContentCellConfigWidth();
        return !!contentCellWidth.endsWith && contentCellWidth.endsWith('%');
    };
    SchedulerData.prototype.getSchedulerWidth = function () {
        var baseWidth = this.documentWidth - this.config.besidesWidth > 0 ? this.documentWidth - this.config.besidesWidth : 0;
        return (this.isSchedulerResponsive()
            ? (baseWidth * Number(this.config.schedulerWidth.slice(0, -1))) / 100
            : this.config.schedulerWidth).toString();
    };
    SchedulerData.prototype.getResourceTableWidth = function () {
        var resourceTableConfigWidth = this.getResourceTableConfigWidth();
        var schedulerWidth = parseInt(this.getSchedulerWidth(), undefined);
        var resourceTableWidth = this.isResourceViewResponsive()
            ? (schedulerWidth * Number(resourceTableConfigWidth.slice(0, -1))) / 100
            : parseInt(resourceTableConfigWidth, undefined);
        if (this.isSchedulerResponsive() && this.getContentTableWidth() + resourceTableWidth < schedulerWidth) {
            resourceTableWidth = schedulerWidth - this.getContentTableWidth();
        }
        return resourceTableWidth;
    };
    SchedulerData.prototype.getContentCellWidth = function () {
        var contentCellConfigWidth = this.getContentCellConfigWidth();
        var schedulerWidth = parseInt(this.getSchedulerWidth(), undefined);
        return this.isContentViewResponsive()
            ? (schedulerWidth * Number(contentCellConfigWidth.slice(0, -1))) / 100
            : parseInt(contentCellConfigWidth, undefined);
    };
    SchedulerData.prototype.getContentTableWidth = function () {
        return this.headers.length * this.getContentCellWidth();
    };
    SchedulerData.prototype.getScrollToSpecialMoment = function () {
        if (this.config.scrollToSpecialMomentEnabled) {
            return this.scrollToSpecialMoment;
        }
        return false;
    };
    SchedulerData.prototype.getSlots = function () {
        return this.isEventPerspective ? this.eventGroups : this.resources;
    };
    SchedulerData.prototype.getSlotById = function (slotId) {
        var slots = this.getSlots();
        var slot;
        slots.forEach(function (item) {
            if (item.id === slotId) {
                slot = item;
            }
        });
        return slot;
    };
    SchedulerData.prototype.getResourceById = function (resourceId) {
        var resource;
        this.resources.forEach(function (item) {
            if (item.id === resourceId) {
                resource = item;
            }
        });
        return resource;
    };
    SchedulerData.prototype.getTableHeaderHeight = function () {
        return this.config.tableHeaderHeight;
    };
    SchedulerData.prototype.getSchedulerContentDesiredHeight = function () {
        var height = 0;
        this.renderData.forEach(function (item) {
            if (item.render) {
                height += item.rowHeight;
            }
        });
        return height;
    };
    SchedulerData.prototype.getCellMaxEvents = function () {
        return this.viewType === ViewTypes_1.ViewTypes.Week
            ? this.config.weekMaxEvents
            : this.viewType === ViewTypes_1.ViewTypes.Day
                ? this.config.dayMaxEvents
                : this.viewType === ViewTypes_1.ViewTypes.Month
                    ? this.config.monthMaxEvents
                    : this.viewType === ViewTypes_1.ViewTypes.Year
                        ? this.config.yearMaxEvents
                        : this.viewType === ViewTypes_1.ViewTypes.Quarter
                            ? this.config.quarterMaxEvents
                            : this.config.customMaxEvents;
    };
    SchedulerData.prototype.getDateLabel = function () {
        var start = moment(this.startDate);
        var end = moment(this.endDate);
        var dateLabel = start.format('LL');
        if (start != end) {
            dateLabel = start.format('LL') + "-" + end.format('LL');
        }
        if (!!this.behaviors.getDateLabelFunc) {
            dateLabel = this.behaviors.getDateLabelFunc(this, this.viewType, this.startDate, this.endDate);
        }
        return dateLabel;
    };
    SchedulerData.prototype.addEvent = function (newEvent) {
        this._attachEvent(newEvent);
        if (this.eventGroupsAutoGenerated) {
            this._generateEventGroups();
        }
        this._createRenderData();
    };
    SchedulerData.prototype.updateEventStart = function (event, newStart) {
        this._detachEvent(event);
        event.start = newStart;
        this._attachEvent(event);
        this._createRenderData();
    };
    SchedulerData.prototype.updateEventEnd = function (event, newEnd) {
        event.end = newEnd;
        this._createRenderData();
    };
    SchedulerData.prototype.moveEvent = function (event, newSlotId, newSlotName, newStart, newEnd) {
        this._detachEvent(event);
        if (this.isEventPerspective) {
            event.groupId = newSlotId;
            event.groupName = newSlotName;
        }
        else {
            event.resourceId = newSlotId;
        }
        event.end = newEnd;
        event.start = newStart;
        this._attachEvent(event);
        this._createRenderData();
    };
    SchedulerData.prototype.isEventInTimeWindow = function (eventStart, eventEnd, windowStart, windowEnd) {
        return eventStart < windowEnd && eventEnd > windowStart;
    };
    SchedulerData.prototype.removeEvent = function (event) {
        var index = this.events.indexOf(event);
        if (index !== -1) {
            this.events.splice(index, 1);
            this._createRenderData();
        }
    };
    SchedulerData.prototype.removeEventById = function (eventId) {
        var index = -1;
        this.events.forEach(function (item, idx) {
            if (item.id === eventId) {
                index = idx;
            }
        });
        if (index !== -1) {
            this.events.splice(index, 1);
            this._createRenderData();
        }
    };
    SchedulerData.prototype.addStock = function (newStock) {
        this._createRenderData();
    };
    SchedulerData.prototype.getResourceTableConfigWidth = function () {
        if (this.showAgenda) {
            return this.config.agendaResourceTableWidth.toString();
        }
        return this.viewType === ViewTypes_1.ViewTypes.Week
            ? this.config.weekResourceTableWidth
            : this.viewType === ViewTypes_1.ViewTypes.Day
                ? this.config.dayResourceTableWidth.toString()
                : this.viewType === ViewTypes_1.ViewTypes.Month
                    ? this.config.monthResourceTableWidth.toString()
                    : this.viewType === ViewTypes_1.ViewTypes.Year
                        ? this.config.yearResourceTableWidth.toString()
                        : this.viewType === ViewTypes_1.ViewTypes.Quarter
                            ? this.config.quarterResourceTableWidth.toString()
                            : this.config.customResourceTableWidth.toString();
    };
    SchedulerData.prototype.getContentCellConfigWidth = function () {
        return this.viewType === ViewTypes_1.ViewTypes.Week
            ? this.config.weekCellWidth.toString()
            : this.viewType === ViewTypes_1.ViewTypes.Day
                ? this.config.dayCellWidth.toString()
                : this.viewType === ViewTypes_1.ViewTypes.Month
                    ? this.config.monthCellWidth.toString()
                    : this.viewType === ViewTypes_1.ViewTypes.Year
                        ? this.config.yearCellWidth.toString()
                        : this.viewType === ViewTypes_1.ViewTypes.Quarter
                            ? this.config.quarterCellWidth.toString()
                            : this.config.customCellWidth.toString();
    };
    SchedulerData.prototype.setDocumentWidth = function (documentWidth) {
        if (documentWidth >= 0) {
            this.documentWidth = documentWidth;
        }
    };
    SchedulerData.prototype.startResizing = function () {
        this.resizing = true;
    };
    SchedulerData.prototype.stopResizing = function () {
        this.resizing = false;
    };
    SchedulerData.prototype.isResizing = function () {
        return this.resizing;
    };
    SchedulerData.prototype.getEventSlotId = function (event) {
        return this.isEventPerspective ? this._getEventGroupId(event) : event.resourceId;
    };
    SchedulerData.prototype._detachEvent = function (event) {
        var index = this.events.indexOf(event);
        if (index !== -1) {
            this.events.splice(index, 1);
        }
    };
    SchedulerData.prototype._attachEvent = function (event) {
        var pos = 0;
        var eventStart = moment(event.start);
        this.events.forEach(function (item, index) {
            var start = moment(item.start);
            if (eventStart >= start) {
                pos = index + 1;
            }
        });
        this.events.splice(pos, 0, event);
    };
    SchedulerData.prototype._handleRecurringEvents = function () {
        var _this = this;
        var recurringEvents = this.events.filter(function (x) { return !!x.rrule; });
        recurringEvents.forEach(function (item) {
            _this._detachEvent(item);
        });
        recurringEvents.forEach(function (item) {
            var windowStart = moment(_this.startDate);
            var windowEnd = moment(_this.endDate).add(1, 'days');
            var oldStart = moment(item.start);
            var oldEnd = moment(item.end);
            var rule = rrule_1.rrulestr(item.rrule);
            var oldDtstart;
            if (!!rule.origOptions.dtstart) {
                oldDtstart = moment(rule.origOptions.dtstart);
            }
            rule.origOptions.dtstart = oldStart.toDate();
            if (!rule.origOptions.until || windowEnd < moment(rule.origOptions.until)) {
                rule.origOptions.until = windowEnd.toDate();
            }
            rule = rrule_1.rrulestr(rule.toString());
            if (item.exdates || item.exrule) {
                var rruleSet_1 = new rrule_1.RRuleSet();
                rruleSet_1.rrule(rule);
                if (item.exrule) {
                    rruleSet_1.exrule(rrule_1.rrulestr(item.exrule));
                }
                if (item.exdates) {
                    item.exdates.forEach(function (exdate) {
                        rruleSet_1.exdate(moment(exdate).toDate());
                    });
                }
                rule = rruleSet_1;
            }
            var all = rule.all();
            var newEvents = all.map(function (time, index) {
                return __assign(__assign({}, item), { recurringEventId: item.id, recurringEventStart: item.start, recurringEventEnd: item.end, id: item.id + "-" + index, start: moment(time), end: moment(time).add(oldEnd.diff(oldStart), 'ms') });
            });
            newEvents.forEach(function (newEvent) {
                var eventStart = moment(newEvent.start);
                var eventEnd = moment(newEvent.end);
                if (_this.isEventInTimeWindow(eventStart, eventEnd, windowStart, windowEnd) &&
                    (!oldDtstart || eventStart >= oldDtstart)) {
                    _this._attachEvent(newEvent);
                }
            });
        });
    };
    SchedulerData.prototype._resolveDate = function (num, date) {
        if (date != undefined) {
            this.selectDate = moment(date);
        }
        this.selectDate = moment();
        if (this.viewType === ViewTypes_1.ViewTypes.Week) {
            this.startDate = date != undefined ? moment(date).startOf('week') : moment(this.startDate).add(num, 'weeks');
            this.endDate = moment(this.startDate).endOf('week');
        }
        else if (this.viewType === ViewTypes_1.ViewTypes.Day) {
            this.startDate = date != undefined ? this.selectDate : moment(this.startDate).add(num, 'days');
            this.endDate = this.startDate;
        }
        else if (this.viewType === ViewTypes_1.ViewTypes.Month) {
            this.startDate = date != undefined ? moment(date).startOf('month') : moment(this.startDate).add(num, 'months');
            this.endDate = moment(this.startDate).endOf('month');
        }
        else if (this.viewType === ViewTypes_1.ViewTypes.Quarter) {
            this.startDate =
                date != undefined ? moment(date).startOf('quarter') : moment(this.startDate).add(num, 'quarters');
            this.endDate = moment(this.startDate).endOf('quarter');
        }
        else if (this.viewType === ViewTypes_1.ViewTypes.Year) {
            this.startDate = date != undefined ? moment(date).startOf('year') : moment(this.startDate).add(num, 'year');
            this.endDate = moment(this.startDate).endOf('year');
        }
        else if (this.viewType === ViewTypes_1.ViewTypes.Custom ||
            this.viewType === ViewTypes_1.ViewTypes.Custom1 ||
            this.viewType === ViewTypes_1.ViewTypes.Custom2) {
            if (this.behaviors.getCustomDateFunc != undefined) {
                var customDate = this.behaviors.getCustomDateFunc(this, num, date);
                this.startDate = customDate.startDate;
                this.endDate = customDate.endDate;
                if (!!customDate.cellUnit) {
                    this.cellUnit = customDate.cellUnit;
                }
            }
            else {
                throw new Error('This is custom view type, set behaviors.getCustomDateFunc func to resolve the time window(startDate and endDate) yourself');
            }
        }
    };
    SchedulerData.prototype._createHeaders = function () {
        var headers = [];
        var start = moment(this.startDate);
        var end = moment(this.endDate);
        var header = start;
        if (this.showAgenda) {
            headers.push({ time: header.format(), nonWorkingTime: false });
        }
        else {
            if (this.cellUnit === CellUnits_1.CellUnits.Hour) {
                start = start.add(this.config.dayStartFrom, 'hours');
                end = end.add(this.config.dayStopTo, 'hours');
                header = start;
                while (header >= start && header <= end) {
                    var minuteSteps = this.getMinuteStepsInHour();
                    for (var i = 0; i < minuteSteps; i++) {
                        var hour = header.hour();
                        if (hour >= this.config.dayStartFrom && hour <= this.config.dayStopTo) {
                            var time = header.format();
                            var nonWorkingTime = this.behaviors.isNonWorkingTimeFunc(this, time);
                            headers.push({ time: time, nonWorkingTime: nonWorkingTime });
                        }
                        header = header.add(this.config.minuteStep, 'minutes');
                    }
                }
            }
            else {
                while (header >= start && header <= end) {
                    var time = header.format();
                    var dayOfWeek = header.weekday();
                    if (this.config.displayWeekend || (dayOfWeek !== 0 && dayOfWeek !== 6)) {
                        var nonWorkingTime = this.behaviors.isNonWorkingTimeFunc(this, time);
                        headers.push({ time: time, nonWorkingTime: nonWorkingTime });
                    }
                    header = header.add(1, 'days');
                }
            }
        }
        this.headers = headers;
    };
    SchedulerData.prototype._createInitHeaderEvents = function (header) {
        var start = moment(header.time);
        var startValue = start.format();
        var endValue = this.showAgenda
            ? this.viewType === ViewTypes_1.ViewTypes.Week
                ? start.add(1, 'weeks').format()
                : this.viewType === ViewTypes_1.ViewTypes.Day
                    ? start.add(1, 'days').format()
                    : this.viewType === ViewTypes_1.ViewTypes.Month
                        ? start.add(1, 'months').format()
                        : this.viewType === ViewTypes_1.ViewTypes.Year
                            ? start.add(1, 'years').format()
                            : this.viewType === ViewTypes_1.ViewTypes.Quarter
                                ? start.add(1, 'quarters').format()
                                : moment(this.endDate).add(1, 'days').format()
            : this.cellUnit === CellUnits_1.CellUnits.Hour
                ? start.add(this.config.minuteStep, 'minutes').format()
                : start.add(1, 'days').format();
        return {
            time: header.time,
            nonWorkingTime: header.nonWorkingTime,
            start: startValue,
            end: endValue,
            count: 0,
            addMore: 0,
            addMoreIndex: 0,
            events: [],
        };
    };
    SchedulerData.prototype._createHeaderEvent = function (render, span, eventItem) {
        return {
            render: render,
            span: span,
            eventItem: eventItem,
        };
    };
    SchedulerData.prototype._createStockData = function (stocks) {
        var stockData = {};
        stocks.forEach(function (value) {
            stockData[value.roomTypeId] = {};
        });
        stocks.forEach(function (value) {
            stockData[value.roomTypeId][value.usesAt] = value;
        });
        return stockData;
    };
    SchedulerData.prototype._getEventGroupId = function (event) {
        return !!event.groupId ? event.groupId.toString() : event.id.toString();
    };
    SchedulerData.prototype._getEventGroupName = function (event) {
        return !!event.groupName ? event.groupName : event.title;
    };
    SchedulerData.prototype._generateEventGroups = function () {
        var _this = this;
        var eventGroups = [];
        var set = new Set();
        this.events.forEach(function (item) {
            var groupId = _this._getEventGroupId(item);
            var groupName = _this._getEventGroupName(item);
            if (!set.has(groupId)) {
                var a = {
                    id: groupId,
                    name: groupName,
                    state: item,
                };
                eventGroups.push(a);
                set.add(groupId);
            }
        });
        this.eventGroups = eventGroups;
    };
    SchedulerData.prototype._createInitRenderData = function (isEventPerspective, eventGroups, resources, headers) {
        var _this = this;
        var slots = isEventPerspective ? eventGroups : resources;
        var slotTree = [];
        var slotMap = new Map();
        slots.forEach(function (slot) {
            var headerEvents = headers.map(function (header) {
                return _this._createInitHeaderEvents(header);
            });
            var slotRenderData = {
                slotId: slot.id,
                thumbnailImagePath: slot.thumbnailImagePath,
                basicStock: slot.basicStock,
                slotName: slot.name,
                slotSubName: slot.subName,
                parentId: slot.parentId,
                groupOnly: slot.groupOnly,
                hasSummary: false,
                rowMaxCount: 0,
                rowHeight: _this.config.nonAgendaSlotMinHeight !== 0
                    ? _this.config.nonAgendaSlotMinHeight + Config_1.Config.defaultResourceHeight
                    : _this.config.eventItemLineHeight + Config_1.Config.defaultResourceHeight,
                headerItems: headerEvents,
                indent: 0,
                hasChildren: false,
                expanded: true,
                render: true,
            };
            var id = slot.id;
            var value;
            if (slotMap.has(id)) {
                value = slotMap.get(id);
                value.data = slotRenderData;
            }
            else {
                value = {
                    data: slotRenderData,
                    children: [],
                };
                slotMap.set(id, value);
            }
            var parentId = slot.parentId;
            if (!parentId || parentId === id) {
                slotTree.push(value);
            }
            else {
                var parentValue = void 0;
                if (slotMap.has(parentId)) {
                    parentValue = slotMap.get(parentId);
                }
                else {
                    parentValue = {
                        data: undefined,
                        children: [],
                    };
                    slotMap.set(parentId, parentValue);
                }
                parentValue.children.push(value);
            }
        });
        var slotStack = [];
        var i;
        for (i = slotTree.length - 1; i >= 0; i--) {
            slotStack.push(slotTree[i]);
        }
        var initRenderData = [];
        var currentNode;
        while (slotStack.length > 0) {
            currentNode = slotStack.pop();
            if (currentNode.data.indent > 0) {
                currentNode.data.render = this.config.defaultExpanded;
            }
            if (currentNode.children.length > 0) {
                currentNode.data.hasChildren = true;
                currentNode.data.expanded = this.config.defaultExpanded;
            }
            initRenderData.push(currentNode.data);
            for (i = currentNode.children.length - 1; i >= 0; i--) {
                currentNode.children[i].data.indent = currentNode.data.indent + 1;
                slotStack.push(currentNode.children[i]);
            }
        }
        return initRenderData;
    };
    SchedulerData.prototype._getSpan = function (startTime, endTime, headers) {
        if (this.showAgenda) {
            return 1;
        }
        var start = moment(startTime);
        var end = moment(endTime);
        var span = 0;
        for (var _i = 0, headers_1 = headers; _i < headers_1.length; _i++) {
            var header = headers_1[_i];
            var spanStart = moment(header.time);
            var spanEnd = this.cellUnit === CellUnits_1.CellUnits.Hour
                ? moment(header.time).add(this.config.minuteStep, 'minutes')
                : moment(header.time).add(1, 'days');
            if (spanStart < end && spanEnd > start) {
                span++;
            }
        }
        return span;
    };
    SchedulerData.prototype._validateResource = function (resources) {
        if (Object.prototype.toString.call(resources) !== '[object Array]') {
            throw new Error('Resources should be Array object');
        }
        resources.forEach(function (item, index) {
            if (item == undefined) {
                console.error("Resource undefined: " + index);
                throw new Error("Resource undefined: " + index);
            }
            if (item.id == undefined || item.name == undefined) {
                console.error('Resource property missed', index, item);
                throw new Error("Resource property undefined: " + index);
            }
        });
    };
    SchedulerData.prototype._validateEventGroups = function (eventGroups) {
        if (Object.prototype.toString.call(eventGroups) !== '[object Array]') {
            throw new Error('Event groups should be Array object');
        }
        eventGroups.forEach(function (item, index) {
            if (item == undefined) {
                console.error("Event group undefined: " + index);
                throw new Error("Event group undefined: " + index);
            }
            if (item.id == undefined || item.name == undefined) {
                console.error('Event group property missed', index, item);
                throw new Error("Event group property undefined: " + index);
            }
        });
    };
    SchedulerData.prototype._validateEvents = function (events) {
        if (Object.prototype.toString.call(events) !== '[object Array]') {
            throw new Error('Events should be Array object');
        }
        events.forEach(function (e, index) {
            if (e == undefined) {
                console.error("Event undefined: " + index);
                throw new Error("Event undefined: " + index);
            }
            if (e.id == undefined ||
                e.resourceId == undefined ||
                e.title == undefined ||
                e.start == undefined ||
                e.end == undefined) {
                console.error('Event property missed', index, e);
                throw new Error("Event property undefined: " + index);
            }
        });
    };
    SchedulerData.prototype._validateMinuteStep = function (minuteStep) {
        if (60 % minuteStep !== 0) {
            console.error('Minute step is not set properly - 60 minutes must be divisible without remainder by this number');
            throw new Error('Minute step is not set properly - 60 minutes must be divisible without remainder by this number');
        }
    };
    SchedulerData.prototype._compare = function (event1, event2) {
        var start1 = moment(event1.start);
        var start2 = moment(event2.start);
        var end1 = moment(event1.end);
        var end2 = moment(event2.end);
        if (start1 !== start2) {
            return start1 < start2 ? -1 : 1;
        }
        if (end1 !== end2) {
            return end1 < end2 ? -1 : 1;
        }
        return event1.id < event2.id ? -1 : 1;
    };
    SchedulerData.prototype._createRenderData = function () {
        var _this = this;
        var initRenderData = this._createInitRenderData(this.isEventPerspective, this.eventGroups, this.resources, this.headers);
        var cellMaxEventsCount = this.getCellMaxEvents();
        var cellMaxEventsCountValue = 30;
        this.events.forEach(function (item) {
            var resourceEventsList = initRenderData.filter(function (x) { return x.slotId === _this.getEventSlotId(item); });
            if (resourceEventsList.length > 0) {
                var resourceEvents_1 = resourceEventsList[0];
                var span_1 = _this._getSpan(item.start, item.end, _this.headers);
                var eventStart_1 = moment(item.start);
                var eventEnd_1 = moment(item.end);
                var pos_1 = -1;
                resourceEvents_1.rowHeight = Config_1.Config.defaultResourceHeight;
                resourceEvents_1.headerItems.forEach(function (header, index) {
                    var headerStart = moment(header.start);
                    var headerEnd = moment(header.end);
                    if (headerEnd > eventStart_1 && headerStart < eventEnd_1) {
                        header.count = header.count + 1;
                        if (header.count > resourceEvents_1.rowMaxCount) {
                            resourceEvents_1.rowMaxCount = header.count;
                            var rowsCount = cellMaxEventsCount <= cellMaxEventsCountValue && resourceEvents_1.rowMaxCount > cellMaxEventsCount
                                ? cellMaxEventsCount
                                : resourceEvents_1.rowMaxCount;
                            var newRowHeight = rowsCount * _this.config.eventItemLineHeight +
                                (_this.config.creatable && _this.config.checkConflict === false ? 0 : 2);
                            if (newRowHeight > resourceEvents_1.rowHeight) {
                                resourceEvents_1.rowHeight = newRowHeight;
                            }
                        }
                        if (pos_1 === -1) {
                            var tmp = 0;
                            while (header.events[tmp] !== undefined) {
                                tmp++;
                            }
                            pos_1 = tmp;
                        }
                        var render = headerStart <= eventStart_1 || index === 0;
                        if (render === false) {
                            var previousHeader = resourceEvents_1.headerItems[index - 1];
                            var previousHeaderStart = moment(previousHeader.start);
                            var previousHeaderEnd = moment(previousHeader.end);
                            if (previousHeaderEnd <= eventStart_1 || previousHeaderStart >= eventEnd_1) {
                                render = true;
                            }
                        }
                        header.events[pos_1] = _this._createHeaderEvent(render, span_1, item);
                    }
                });
            }
        });
        if (cellMaxEventsCount <= cellMaxEventsCountValue || this.behaviors.getSummaryFunc !== undefined) {
            initRenderData.forEach(function (resourceEvents) {
                var hasSummary = false;
                resourceEvents.headerItems.forEach(function (headerItem) {
                    if (cellMaxEventsCount <= cellMaxEventsCountValue) {
                        var renderItemsCount = 0;
                        var addMoreIndex = 0;
                        var index = 0;
                        while (index < cellMaxEventsCount - 1) {
                            if (headerItem.events[index] !== undefined) {
                                renderItemsCount++;
                                addMoreIndex = index + 1;
                            }
                            index++;
                        }
                        if (headerItem.events[index] !== undefined) {
                            if (renderItemsCount + 1 < headerItem.count) {
                                headerItem.addMore = headerItem.count - renderItemsCount;
                                headerItem.addMoreIndex = addMoreIndex;
                            }
                        }
                        else {
                            if (renderItemsCount < headerItem.count) {
                                headerItem.addMore = headerItem.count - renderItemsCount;
                                headerItem.addMoreIndex = addMoreIndex;
                            }
                        }
                    }
                    if (_this.behaviors.getSummaryFunc !== undefined) {
                        var events_1 = [];
                        headerItem.events.forEach(function (e) {
                            if (!!e && !!e.eventItem) {
                                events_1.push(e.eventItem);
                            }
                        });
                        headerItem.summary = _this.behaviors.getSummaryFunc(_this, events_1, resourceEvents.slotId, resourceEvents.slotName, headerItem.start, headerItem.end);
                        if (!!headerItem.summary && headerItem.summary.text != undefined) {
                            hasSummary = true;
                        }
                    }
                });
                resourceEvents.hasSummary = hasSummary;
            });
        }
        this.renderData = initRenderData;
    };
    return SchedulerData;
}());
exports.default = SchedulerData;
